import { useState, useEffect } from 'react';
import useContentDAO from '../../../hooks/useDAO';
import { ProposalView, ProposalStatus } from '../../../hooks/types'; // Make sure to import the ProposalView and ProposalStatus types

const ContentDAOInterface = () => {
  const {
    joinDAO,
    leaveDAO,
    createProposal,
    voteForProposal,
    voteAgainstProposal,
    executeProposal,
    getProposals,
  } = useContentDAO();
  const [stakeAmount, setStakeAmount] = useState('');
  const [proposalName, setProposalName] = useState('');
  const [proposalDescription, setProposalDescription] = useState('');
  const [proposalDuration, setProposalDuration] = useState('');
  const [proposals, setProposals] = useState<ProposalView[]>([]); // Initialize with an empty array of ProposalView

  useEffect(() => {
    const fetchProposals = async () => {
      const fetchedProposals = await getProposals();
      setProposals(fetchedProposals);
    };
    fetchProposals();
  }, [getProposals]);

  const handleJoinDAO = async () => {
    await joinDAO(parseFloat(stakeAmount));
    setStakeAmount('');
  };

  const handleLeaveDAO = async () => {
    await leaveDAO();
  };

  const handleCreateProposal = async () => {
    await createProposal(proposalName, proposalDescription, parseInt(proposalDuration));
    setProposalName('');
    setProposalDescription('');
    setProposalDuration('');
  };

  const handleVoteForProposal = async (proposalIndex: number) => {
    await voteForProposal(proposalIndex);
  };

  const handleVoteAgainstProposal = async (proposalIndex: number) => {
    await voteAgainstProposal(proposalIndex);
  };

  const handleExecuteProposal = async (proposalIndex: number) => {
    await executeProposal(proposalIndex);
  };

  return (
    <div>
      <h2>Content DAO Interface</h2>
      <div>
        <h3>Join DAO</h3>
        <input
          type="number"
          placeholder="Stake Amount"
          value={stakeAmount}
          onChange={(e) => setStakeAmount(e.target.value)}
        />
        <button onClick={handleJoinDAO}>Join DAO</button>
      </div>
      <div>
        <h3>Leave DAO</h3>
        <button onClick={handleLeaveDAO}>Leave DAO</button>
      </div>
      <div>
        <h3>Create Proposal</h3>
        <input
          type="text"
          placeholder="Proposal Name"
          value={proposalName}
          onChange={(e) => setProposalName(e.target.value)}
        />
        <input
          type="text"
          placeholder="Proposal Description"
          value={proposalDescription}
          onChange={(e) => setProposalDescription(e.target.value)}
        />
        <input
          type="number"
          placeholder="Proposal Duration (seconds)"
          value={proposalDuration}
          onChange={(e) => setProposalDuration(e.target.value)}
        />
        <button onClick={handleCreateProposal}>Create Proposal</button>
      </div>
      <div>
        <h3>Proposals</h3>
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Status</th>
              <th>Time Left</th>
              <th>Vote For</th>
              <th>Vote Against</th>
              <th>Total Votes</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {proposals.map((proposal, index) => (
              <tr key={index}>
                <td>{proposal.name}</td>
                <td>{proposal.description}</td>
                <td>{ProposalStatus[proposal.status]}</td>
                <td>{proposal.timeLeft}</td>
                <td>{proposal.voteCountYes}</td>
                <td>{proposal.voteCountNo}</td>
                <td>{proposal.totalVotes}</td>
                <td>
                  <button onClick={() => handleVoteForProposal(index)}>Vote For</button>
                  <button onClick={() => handleVoteAgainstProposal(index)}>Vote Against</button>
                  <button onClick={() => handleExecuteProposal(index)}>Execute</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ContentDAOInterface;



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Content.sol";
import "./Token.sol";
import "./Vault.sol";

contract ContentDAO {
    CCP public ccpContract;
    Token public tokenContract;
    Vault public vaultContract;

    mapping(address => uint256) public stakedTokens;
    mapping(address => bool) public members;
    uint256 public minimumStake;
    uint256 public memberCount;

    uint256 public numProposals;
    mapping(uint256 => Proposal) public proposals;

    struct Proposal {
        uint256 id;
        string description;
        uint256 voteCountYes;
        uint256 voteCountNo;
        bool executed;
        mapping(address => bool) hasVoted;
    }

    event ProposalCreated(uint256 id, string description);
    event VoteCast(uint256 proposalId, bool inFavor, address voter, uint256 votingPower);
    event ProposalExecuted(uint256 id);
    event MemberJoined(address member, uint256 stakeAmount);
    event MemberLeft(address member, uint256 unstakeAmount);

    modifier onlyMembers() {
        require(members[msg.sender], "Only members can perform this action");
        _;
    }

    constructor(address _ccpContract, address _tokenContract, uint256 _minimumStake, address _vaultAddress) {
        ccpContract = CCP(_ccpContract);
        tokenContract = Token(_tokenContract);
        minimumStake = _minimumStake;
        vaultContract = Vault(_vaultAddress);
    }

    function joinDAO(uint256 stakeAmount) public {
        require(!members[msg.sender], "Already a member");
        require(stakeAmount >= minimumStake, "Stake amount too low");
        require(tokenContract.approve(address(vaultContract), stakeAmount), "Token approval failed");
        vaultContract.stake(stakeAmount, msg.sender);
        stakedTokens[msg.sender] = stakeAmount;
        members[msg.sender] = true;
        memberCount++;
        emit MemberJoined(msg.sender, stakeAmount);
    }

    function leaveDAO() public onlyMembers {
        uint256 unstakeAmount = stakedTokens[msg.sender];
        require(unstakeAmount > 0, "No staked tokens");
        vaultContract.withdrawStake(unstakeAmount, msg.sender);
        stakedTokens[msg.sender] = 0;
        members[msg.sender] = false;
        memberCount--;
        emit MemberLeft(msg.sender, unstakeAmount);
    }

    function createProposal(string memory name, string memory description, uint256 duration) public onlyMembers returns (uint256) {
        Proposal storage newProposal = proposals[numProposals];
        newProposal.id = numProposals;
        newProposal.description = description;
        newProposal.voteCountYes = 0;
        newProposal.voteCountNo = 0;
        newProposal.executed = false;
        emit ProposalCreated(numProposals, description);
        numProposals++;
        return numProposals - 1;
    }

    function voteProposal(uint256 proposalId, bool inFavor) public onlyMembers {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal has already been executed");
        require(!proposal.hasVoted[msg.sender], "Already voted");

        uint256 votingPower = stakedTokens[msg.sender];
        if (inFavor) {
            proposal.voteCountYes += votingPower;
        } else {
            proposal.voteCountNo += votingPower;
        }
        proposal.hasVoted[msg.sender] = true;

        emit VoteCast(proposalId, inFavor, msg.sender, votingPower);
    }

    function voteForProposal(uint256 proposalIndex) public onlyMembers {
        voteProposal(proposalIndex, true);
    }

    function voteAgainstProposal(uint256 proposalIndex) public onlyMembers {
        voteProposal(proposalIndex, false);
    }

    function executeProposal(uint256 proposalId) public onlyMembers {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal has already been executed");
        require(proposal.voteCountYes > proposal.voteCountNo, "Proposal did not pass");

        // Execute proposal logic here
        string memory description = proposal.description;
        if (keccak256(bytes(description)) == keccak256(bytes("Change user state variables"))) {
            // Modify user state variables
            // Example: ccpContract.updateUserVariables(address, ...);
        } else if (keccak256(bytes(description)) == keccak256(bytes("Delete content"))) {
            // Delete content
            // Example: ccpContract.deleteContent(uint256);
        } else if (keccak256(bytes(description)) == keccak256(bytes("Ban user"))) {
            // Ban user
            // Example: ccpContract.banUser(address);
        } else if (keccak256(bytes(description)) == keccak256(bytes("Unban user"))) {
            // Unban user
            // Example: ccpContract.unbanUser(address);
        } else if (keccak256(bytes(description)) == keccak256(bytes("Update minimum stake"))) {
            // Update minimum stake
            updateMinimumStake(parseStakeAmount(description));
        }

        proposal.executed = true;
        emit ProposalExecuted(proposalId);
    }

    function updateMinimumStake(uint256 newStake) private {
        minimumStake = newStake;
    }

    function parseStakeAmount(string memory description) private pure returns (uint256) {
        // Implement logic to parse the stake amount from the description string
        // Return the parsed stake amount
    }

    function getProposal(uint256 proposalIndex) public view returns (ProposalView memory) {
        Proposal storage proposal = proposals[proposalIndex];
        return ProposalView({
            name: "", // no name field in Proposal struct
            description: proposal.description,
            status: proposal.executed ? ProposalStatus.Executed : (proposal.voteCountYes > proposal.voteCountNo ? ProposalStatus.Approved : ProposalStatus.Rejected),
            timeLeft: 0, // no timeLeft field in Proposal struct
            voteCountYes: proposal.voteCountYes,
            voteCountNo: proposal.voteCountNo,
            totalVotes: proposal.voteCountYes + proposal.voteCountNo,
            executed: proposal.executed
        });
    }

    function getProposalCount() public view returns (uint256) {
        return numProposals;
    }

    enum ProposalStatus {
        Pending,
        Approved,
        Rejected,
        Executed
    }

    struct ProposalView {
        string name;
        string description;
        ProposalStatus status;
        uint256 timeLeft;
        uint256 voteCountYes;
        uint256 voteCountNo;
        uint256 totalVotes;
        bool executed;
    }
}

// ABI
[
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "description",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "duration",
        "type": "uint256"
      }
    ],
    "name": "createProposal",
    "outputs": [],
    "stateMutability": "nonpayable",
    "